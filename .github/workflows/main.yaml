# This workflow builds and pushes a new Docker container image to Amazon ECR
# and deploys it to Amazon ECS whenever there is a push to the "main" branch.

# Prerequisites:
# 1. Create an ECR repository to store your images:
#    Example command: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace `ECR_REPOSITORY` and `AWS_REGION` environment variables with your repository's name and region.
# 2. Store IAM user access keys in GitHub Actions secrets as `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    This user should have the appropriate permissions for ECR and ECS.
#    See AWS and GitHub documentation for best practices on handling these credentials.


name: Amazon ECR CI/CD Workflow

on:
  push:
    branches: 
        - main # Specify the branches that should trigger this workflow, e.g., ['main', 'dev'] passed for multiple branches
    paths-ignore:
        - 'README.md'  # Ignore README changes to avoid unnecessary deployments

permissions:
    id-token: write
    contents: read

jobs:
    # Job 1: Continuous Integration
    integration:
        name: Continuous Integration
        runs-on: ubuntu-latest
        steps:
          # Step 1: Check out code from the repository
          - name: Checkout Code
            uses: actions/checkout@v3
          # Step 2: Lint the code
          - name: Lint code
            run: echo "Linting repository"
          # Step 3: Run unit tests if any 
          - name: Run unit tests
            run: echo "Running unit tests"

    # Job 2: Push Private Docker Images to AWS ECR Repo
    # steps:
    # - name: Checkout
    #   uses: actions/checkout@v4

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.AWS_REGION }}

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and
    #     # push it to ECR so that it can
    #     # be deployed to ECS.
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true

    
    # Job 2: Continuous Delivery - Build and Push Docker Image to AWS ECR
    build-and-push-ecr-image:
        name: Continuous Delivery
        needs: integration
        runs-on: ubuntu-latest
        steps:
            # Step 1: Check out code from the repository
          - name: Checkout Code
            uses: actions/checkout@v3
            # Step 2: Install utilities (jq and unzip)
          - name: Install Utilities
            run: |
              sudo apt-get update
              sudo apt-get install -y jq unzip
            # Step 3: Configure AWS credentials for authentication
          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
            # Step 4: Log in to Amazon ECR
          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
            # Step 5: Build, tag, and push Docker image to ECR
          - name: Build, tag, and push image to Amazon ECR
            id: build-image
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
              IMAGE_TAG: latest
            run: |
              # Build a docker container and
              # push it to ECR so that it can
              # be deployed to ECS.
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    # Job 3: Continuous Deployment - Deploy the Image from ECR to ECS
    Continuous-Deployment:
      needs: build-and-push-ecr-image
      runs-on: self-hosted
      steps: 
        # Step 1: Check out code from the repository
       - name: Checkout
         uses: actions/checkout@v3
        # Step 2: Configure AWS credentials for ECS deployment
       - name: Configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        # Step 3: Log in to Amazon ECR
       - name: Login to Amazon ECR
         id: login-ecr
         uses: aws-actions/amazon-ecr-login@v1
        # Step 4: Pull the latest Docker image from ECR
       - name: Pull latest images
         run: |
            docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
            
        ## Optional Step: Stop and remove the container if it's already running
        # - name: Stop and remove  container if running
        #   run: |
        #    docker ps -q --filter "name=mltest" | grep -q . && docker stop mltest && docker rm -fv mltest
        
        # Step 5: Run the Docker container to serve users
       - name: Run Docker Image to serve users
         run: |
            docker run -d -p 8080:8080 --ipc="host" --name=mltest -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
        
        # Step 6: Clean up previous images and containers to free up space
       - name: Clean previous images and containers
         run: |
            docker system prune -f